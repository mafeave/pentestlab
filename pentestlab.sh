#!/bin/bash

ETC_HOSTS=/etc/hosts

#########################
# The command line help #
#########################
display_help() {
    echo -e "Local PentestLab Management Script (Docker based) \n"
    echo -e "Usage: $0 {info|start|stop} [projectname]"
    echo -e "or usage: $0 {list|status|help}\n"
    echo -e " This scripts uses docker and hosts alias to make web apps available on localhost \n"
    echo " Ex."
    echo " $0 list"
    echo " 	List all available projects"
    echo " $0 status"
    echo "	Show status for all projects"
    echo " $0 start bwapp"
    echo " 	Start project and make it available on localhost" 
    echo " $0 info bwapp"
    echo " 	Show information about bwapp project"
    echo
    echo " Dockerfiles from:"
    echo "  VAmPI                     - (saitej007/vampi_docker)"
    echo "  OWASP Top 10 Application  - (yuntumg/owasp_top10_fixed:0.0.1)"
    echo "  Pixi                      - (deadrobots/pixi:app)"
    echo "  XVWA                      - (tuxotron/xvwa)"
    echo "  SQLi Labs                 - (acgpiano/sqli-labs:latest)"
    echo "  OWASP ZAP                 - (owasp/zap2docker-stable)"
    exit 1
}

############################################
# Check if docker is installed and running #
############################################
if ! [ -x "$(command -v docker)" ]; then
  echo 
  echo "Docker was not found. Please install docker before running this script."
  echo "You can try the script: 	install_docker_kali_x64.sh"
  echo "In the same repo at https://github.com/itboxltda/pentestlab"
  exit
fi

if sudo service docker status | grep inactive > /dev/null
then 
	echo "Docker is not running."
	echo -n "Do you want to start docker now (y/n)?"
	read answer
	if echo "$answer" | grep -iq "^y"; then
		sudo service docker start
	else
		echo "Not starting. Script will not be able to run applications."
	fi
fi

#########################
# List all pentest apps #
#########################
list() {
    echo "Available pentest applications"
    echo "  vampi		      - vampi Flask vulnerable API"
    echo "  owasp_top10	      - OWASP TOP 10 Application"
    echo "  pixi		      - Pixi vulnerable web application"
    echo "  xvwa		      - Xtreme Vulnerable Web Application."
    echo "  sql_injection	      - SQLi Labs"
    echo "  zap		      - OWASP ZAP"
    exit 1
}

#########################
# Info dispatch         #
#########################
info () {
  case "$1" in 
    bwapp)
      project_info_vampi
      ;;
    owasp_top10)
      project_info_owasp_top10
      ;;
    pixi)
      project_info_pixi      
      ;;
    xvwa)
      project_info_xvwa     
      ;;
    sql_injection)
      project_info_sql_injection 
      ;;
    zap)
      project_zap
    ;;
    *) 
      echo "Unknown project name"
      list
      ;;
  esac  
}

#########################
# hosts file util       #
#########################  # Based on https://gist.github.com/irazasyed/a7b0a079e7727a4315b9
function removehost() {
  if [ -n "$(grep $1 /etc/hosts)" ]
  then
    echo "Removing $1 from $ETC_HOSTS";
    sudo sed -i".bak" "/$1/d" $ETC_HOSTS
  else
    echo "$1 was not found in your $ETC_HOSTS";
  fi
}

function addhost() { # ex.   127.5.0.1	bwapp
  HOSTS_LINE="$1\t$2"
  if [ -n "$(grep $2 /etc/hosts)" ]
    then
      echo "$2 already exists in /etc/hosts"
    else
      echo "Adding $2 to your $ETC_HOSTS";
      sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts";

      if [ -n "$(grep $2 /etc/hosts)" ]
        then
          echo -e "$HOSTS_LINE was added succesfully to /etc/hosts";
        else
          echo "Failed to Add $2, Try again!";
      fi
  fi
}

#########################
# PROJECT INFO & STARTUP#
#########################
project_info_vampi () {
echo "VAmPI is a vulnerable API made with Flask and it includes vulnerabilities from the OWASP top 10 vulnerabilities for APIs."
echo "It was created as I wanted a vulnerable API to evaluate the efficiency of tools used to detect security issues in APIs. "
echo "It includes a switch on/off to allow the API to be vulnerable or not while testing. This allows to cover better the cases for false positives/negatives."
echo "VAmPI can also be used for learning/teaching purposes."
echo 
echo "You can find a bit more details about the vulnerabilities in erev0s.com."
echo
echo "TECH: Flask"
}

project_startinfo_vampi () {
  echo "A quick rundown of the actions included can be seen in https://github.com/erev0s/VAmPI"
  echo "ex. http://127.5.0.1/users/v1"
}

project_info_owasp_top10 () {
echo "This is an 'Intentionally Vulnerable' Web Application meant for Trining Purpose Only"
echo "This Web Application demonstrates the common web vulnerabilities as stated in owasp.org"
echo
echo "TECH: 	Flask Python"
echo "FEATURES: LESSONS"
}

project_startinfo_owasp_top10 () {
  echo "For studying security. Never implement it in a production environment."
}

project_info_pixi () {
echo "Pixi is a deliberately vulnerable web application that is part of the OWASP DevSlop project"
echo "DevSlop is a training ground for DevSecOps. In addition to Pixi, DevSlop also offers many YouTube shows, blog posts and different modules on various security topics!"
echo
echo "  https://devslop.co/pages/pixi.html"
echo
echo "TECH: 	Mongo"
echo "FEATURES: LESSONS"
}

project_startinfo_pixi () {
  echo "Pixi available at https://devslop.co/pages/pixi.html"
}

project_info_xvwa () {
echo "XVWA on LAMP base docker image"
echo
echo "https://github.com/tuxotron/xvwa_lamp_container"
echo
echo "TECH: 	PHP"
echo "FEATURES: LESSONS"
}

project_startinfo_xvwa () {
  echo "XVWA available at http://localhost/xvwa"
}

project_info_sql_injection () {
echo "Sql injection labs"
echo
echo "TECH: 	MySQL"
echo "FEATURES: Sql injection"
}

project_startinfo_sql_injection () {
  echo "Sql injection labs"
}

project_info_zap () {
echo "The OWASP Zed Attack Proxy (ZAP) is one of the worldâ€™s most popular free security tools and is actively maintained by a dedicated international team of volunteers."
echo "It can help you automatically find security vulnerabilities in your web applications while you are developing and testing your applications."
echo "It's also a great tool for experienced pentesters to use for manual security testing."
echo "https://github.com/zaproxy/zaproxy"
}

project_startinfo_zap () {
  echo "OWASP ZAP available at http://127.10.0.1:8080/zap/"
}

#########################
# Common start          #
#########################
project_start (){
  fullname=$1		# ex. WebGoat 7.1
  projectname=$2     	# ex. wowasp_top10
  dockername=$3  	# ex. raesene/bwapp
  ip=$4   		# ex. 127.5.0.1
  port=$5		# ex. 80
  port2=$6		# optional second port binding
  
  echo "Starting $fullname"
  addhost "$ip" "$projectname"

  if [ "$(sudo docker ps -aq -f name=$projectname)" ]; 
  then
    echo "Running command: docker start $projectname"
    sudo docker start $projectname
  else
    if [ -n "${6+set}" ]; then
      echo "Running command: docker run --name $projectname -d -p $ip:80:$port -p $ip:$port2:$port2 $dockername"
      sudo docker run --name $projectname -d -p $ip:80:$port -p $ip:$port2:$port2 $dockername
    else echo "not set";
      echo "Running command: docker run --name $projectname -d -p $ip:80:$port $dockername"
      sudo docker run --name $projectname -d -p $ip:80:$port $dockername
    fi
  fi
  echo -e "DONE! \n"
  echo "Docker mapped to http://$projectname or http://$ip"
}


#########################
# Common stop           #
#########################
project_stop (){
  fullname=$1	# ex. VAmPI
  projectname=$2     # ex. owasp_top10

  echo "Stopping... $fullname"
  echo "Running command: docker stop $projectname"
  sudo docker stop $projectname
  removehost "$projectname"
}

project_status(){
  if [ "$(sudo docker ps -q -f name=vampi)" ]; then
    echo "VAmPI			  running at http://vampi"
  else 
    echo "VAmPI			  not running"
  fi
  if [ "$(sudo docker ps -q -f name=owasp_top10)" ]; then
    echo "OWASP Top10 Application	  running at http://owasp_top10"
  else 
    echo "OWASP Top10 Application	  not running"  
  fi
  if [ "$(sudo docker ps -q -f name=pixi)" ]; then
    echo "Pixi			  running at http://pixi"
  else 
    echo "Pixi			  not running"  
  fi
  if [ "$(sudo docker ps -q -f name=xvwa)" ]; then
    echo "XVWA			  running at http://localhost:84/xvwa/"
  else 
    echo "XVWA			  not running"  
  fi
  if [ "$(sudo docker ps -q -f name=sql_injection)" ]; then
    echo "SQL injection		  running at http://sql_injection"
  else 
    echo "SQL injection		  not running"  
  fi
  if [ "$(sudo docker ps -q -f name=zap)" ]; then
    echo "ZAP			  running at http://127.10.0.1:8080/zap/"
  else 
    echo "ZAP			  not running"  
  fi
}

project_start_dispatch(){
  case "$1" in
    vampi)
      project_start "VAmPI" "vampi" "saitej007/vampi_docker" "127.5.0.1" "5000"
      project_startinfo_vampi
    ;;
    owasp_top10)
      project_start "OWASP Top 10" "owasp_top10" "yuntumg/owasp_top10_fixed:0.0.1" "127.6.0.1" "5000"
      project_startinfo_owasp_top10
    ;;
    pixi)
      project_start "Pixi" "pixi" "deadrobots/pixi:app" "127.7.0.1" "8000"
      project_startinfo_pixi
    ;;
    xvwa)
      project_start "XVWA" "xvwa" "tuxotron/xvwa" "127.8.0.1" "80"
      project_startinfo_xvwa
    ;;
    sql_injection)
      project_start "SQL inyection" "sql_injection" "acgpiano/sqli-labs:latest" "127.9.0.1" "80"
      project_startinfo_sql_injection
    ;;    
    zap)
      project_start "ZAP" "zap" "owasp/zap2docker-stable zap-webswing.sh" "127.10.0.1" "8080" "8090"
      project_startinfo_zap
    ;;
    *)
    echo "ERROR: Project dispatch doesn't recognize the project name" 
    ;;
  esac  
}

project_stop_dispatch(){
  case "$1" in
    vampi)
      project_stop "VAmPI" "vampi"
    ;;
    owasp_top10)
      project_stop "OWASP Top 10" "owasp_top10"
    ;;
    pixi)
      project_stop "Pixi" "pixi"
    ;;
    xvwa)
      project_stop "XVWA" "xvwa"
    ;;
    sql_injection)
      project_stop "SQL inyection" "sql_injection"
    ;;
    zap)
      project_stop "ZAP" "zap"
    ;;
    *)
    echo "ERROR: Project dispatch doesn't recognize the project name" 
    ;;
  esac  
}

#########################
# Main switch case      #
#########################
case "$1" in
  start)
    if [ -z "$2" ]
    then
      echo -e "ERROR: Option start needs project name in lowercase \n"
      list # call list ()
      break
    fi
    project_start_dispatch $2
    ;;
  stop)
    if [ -z "$2" ]
    then
      echo -e "ERROR: Option stop needs project name in lowercase \n"
      list # call list ()
      break
    fi
    project_stop_dispatch $2
    ;;
  list)
    list # call list ()
    ;;
  status)
    project_status # call project_status ()
    ;;
  info)
    if [ -z "$2" ]
    then
      echo -e "ERROR: Option info needs project name in lowercase \n"
      list # call list ()
      break
    fi
    info $2
    ;;
  help)
    display_help
    ;;
  *)
    echo "ERROR: select a correct option, for more information use ./pentestlab.sh help"
;;
esac